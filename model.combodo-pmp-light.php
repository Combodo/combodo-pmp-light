<?php
//
// File generated by ... on the 2020-03-24T12:39:48+0000
// Please do not edit manually
//

/**
 * Classes and menus for combodo-pmp-light (version 0.1.0)
 *
 * @author      iTop compiler
 * @license     http://opensource.org/licenses/AGPL-3.0
 */



class Project extends Ticket
{
	public static function Init()
	{
		$aParams = array(			'category' => 'bizmodel,searchable',
			'key_type' => 'autoincrement',
			'name_attcode' => array('ref', 'title'),
			'state_attcode' => 'status',
			'reconc_keys' => array('ref', 'finalclass'),
			'db_table' => 'project',
			'db_key_field' => 'id',
			'db_finalclass_field' => '',
			'icon' => utils::GetAbsoluteUrlModulesRoot().'combodo-pmp-light/../combodo-pmp-light/asset/img/project.png',
			'uniqueness_rules' => array (
),);
		MetaModel::Init_Params($aParams);
		MetaModel::Init_InheritAttributes();
		MetaModel::Init_AddAttribute(new AttributeDecimal("estimated_budget", array("allowed_values"=>null, "sql"=>'estimated_budget', "default_value"=>'', "is_null_allowed"=>true, "depends_on"=>array(), "digits"=>10, "decimals"=>2, "always_load_in_tables"=>false)));
		MetaModel::Init_AddAttribute(new AttributeHTML("requirement", array("allowed_values"=>null, "sql"=>'requirement', "default_value"=>'', "is_null_allowed"=>true, "depends_on"=>array(), "always_load_in_tables"=>false)));
		MetaModel::Init_AddAttribute(new AttributeHTML("exclusions", array("allowed_values"=>null, "sql"=>'exclusions', "default_value"=>'', "is_null_allowed"=>true, "depends_on"=>array(), "always_load_in_tables"=>false)));
		MetaModel::Init_AddAttribute(new AttributeHTML("constraints", array("allowed_values"=>null, "sql"=>'constraints', "default_value"=>'', "is_null_allowed"=>true, "depends_on"=>array(), "always_load_in_tables"=>false)));
		MetaModel::Init_AddAttribute(new AttributeLinkedSet("wbss_list", array("linked_class"=>'WBS', "ext_key_to_me"=>'project_id', "count_min"=>0, "count_max"=>0, "allowed_values"=>null, "depends_on"=>array(), "always_load_in_tables"=>false)));
		MetaModel::Init_AddAttribute(new AttributeEnum("status", array("allowed_values"=>new ValueSetEnum("initiated,planned,executed,monitored,closed,cancelled"), "display_style"=>'list', "sql"=>'status', "default_value"=>'initiated', "is_null_allowed"=>false, "depends_on"=>array(), "always_load_in_tables"=>false)));
		MetaModel::Init_AddAttribute(new AttributeDateTime("creation_date", array("allowed_values"=>null, "sql"=>'creation_date', "default_value"=>'', "is_null_allowed"=>true, "depends_on"=>array(), "always_load_in_tables"=>false)));
		MetaModel::Init_AddAttribute(new AttributeDateTime("revised_end_date", array("allowed_values"=>null, "sql"=>'revised_end_date', "default_value"=>'', "is_null_allowed"=>true, "depends_on"=>array(), "always_load_in_tables"=>false, "tracking_level"=>ATTRIBUTE_TRACKING_ALL)));
		MetaModel::Init_AddAttribute(new AttributeDecimal("mgt_reserve_budget", array("allowed_values"=>null, "sql"=>'mgt_reserve_budget', "default_value"=>'', "is_null_allowed"=>true, "depends_on"=>array(), "digits"=>8, "decimals"=>2, "always_load_in_tables"=>false)));
		MetaModel::Init_AddAttribute(new AttributeDecimal("costs_spent", array("allowed_values"=>null, "sql"=>'costs_spent', "default_value"=>'', "is_null_allowed"=>true, "depends_on"=>array(), "digits"=>10, "decimals"=>2, "always_load_in_tables"=>false)));
		MetaModel::Init_AddAttribute(new AttributeDateTime("calculated_end_date", array("allowed_values"=>null, "sql"=>'calculated_end_date', "default_value"=>'', "is_null_allowed"=>true, "depends_on"=>array(), "always_load_in_tables"=>false, "tracking_level"=>ATTRIBUTE_TRACKING_ALL)));
		MetaModel::Init_AddAttribute(new AttributeDecimal("wbs_cost", array("allowed_values"=>null, "sql"=>'wbs_cost', "default_value"=>'', "is_null_allowed"=>true, "depends_on"=>array(), "digits"=>8, "decimals"=>2, "always_load_in_tables"=>false)));

		// Lifecycle (status attribute: status)
		//
		MetaModel::Init_DefineStimulus(new StimulusUserAction("ev_plan", array()));
		MetaModel::Init_DefineStimulus(new StimulusUserAction("ev_execute", array()));
		MetaModel::Init_DefineStimulus(new StimulusUserAction("ev_reexecute", array()));
		MetaModel::Init_DefineStimulus(new StimulusUserAction("ev_close", array()));
		MetaModel::Init_DefineStimulus(new StimulusUserAction("ev_monitor", array()));
		MetaModel::Init_DefineStimulus(new StimulusUserAction("ev_cancel", array()));
		MetaModel::Init_DefineState(
			"initiated",
			array(
				"attribute_inherit" => '',
				"attribute_list" => array(
					'creation_date' => OPT_ATT_HIDDEN,
					'last_update' => OPT_ATT_HIDDEN,
					'contingency_reserve' => OPT_ATT_HIDDEN,
					'costs_spent' => OPT_ATT_HIDDEN,
					'wbs_cost' => OPT_ATT_HIDDEN,
					'close_date' => OPT_ATT_HIDDEN,
					'calculated_end_date' => OPT_ATT_READONLY,
					'revised_end_date' => OPT_ATT_HIDDEN,
					'end_date' => OPT_ATT_MANDATORY,
				),
			)
		);
		MetaModel::Init_DefineTransition("initiated", "ev_plan", array(
            "target_state"=>"planned",
            "actions"=>array(),
            "user_restriction"=>null,
            "attribute_list"=>array(
            )
        ));
		MetaModel::Init_DefineTransition("initiated", "ev_cancel", array(
            "target_state"=>"cancelled",
            "actions"=>array(array('verb' => 'SetCurrentDate', 'params' => array(array('type' => 'attcode', 'value' => "close_date")))),
            "user_restriction"=>null,
            "attribute_list"=>array(
                'private_log' => OPT_ATT_MUSTPROMPT,
            )
        ));
		MetaModel::Init_DefineState(
			"planned",
			array(
				"attribute_inherit" => 'initiated',
				"attribute_list" => array(
					'creation_date' => OPT_ATT_READONLY,
					'last_update' => OPT_ATT_READONLY,
					'contingency_reserve' => OPT_ATT_READONLY,
					'costs_spent' => OPT_ATT_HIDDEN,
					'wbs_cost' => OPT_ATT_READONLY,
					'agent_id' => OPT_ATT_MUSTPROMPT,
					'revised_end_date' => OPT_ATT_NORMAL,
					'constraints' => OPT_ATT_MUSTPROMPT,
					'exclusions' => OPT_ATT_MUSTPROMPT,
					'requirement' => OPT_ATT_MUSTPROMPT,
				),
			)
		);
		MetaModel::Init_DefineTransition("planned", "ev_execute", array(
            "target_state"=>"executed",
            "actions"=>array(),
            "user_restriction"=>null,
            "attribute_list"=>array(
                'private_log' => OPT_ATT_MUSTPROMPT,
            )
        ));
		MetaModel::Init_DefineTransition("planned", "ev_cancel", array(
            "target_state"=>"cancelled",
            "actions"=>array(array('verb' => 'SetCurrentDate', 'params' => array(array('type' => 'attcode', 'value' => "close_date")))),
            "user_restriction"=>null,
            "attribute_list"=>array(
                'private_log' => OPT_ATT_MUSTPROMPT,
            )
        ));
		MetaModel::Init_DefineState(
			"executed",
			array(
				"attribute_inherit" => 'planned',
				"attribute_list" => array(
					'costs_spent' => OPT_ATT_READONLY,
				),
			)
		);
		MetaModel::Init_DefineTransition("executed", "ev_monitor", array(
            "target_state"=>"monitored",
            "actions"=>array(),
            "user_restriction"=>null,
            "attribute_list"=>array(
                'private_log' => OPT_ATT_MUSTPROMPT,
            )
        ));
		MetaModel::Init_DefineTransition("executed", "ev_cancel", array(
            "target_state"=>"cancelled",
            "actions"=>array(array('verb' => 'SetCurrentDate', 'params' => array(array('type' => 'attcode', 'value' => "close_date")))),
            "user_restriction"=>null,
            "attribute_list"=>array(
                'private_log' => OPT_ATT_MUSTPROMPT,
            )
        ));
		MetaModel::Init_DefineState(
			"monitored",
			array(
				"attribute_inherit" => 'executed',
				"attribute_list" => array(
				),
			)
		);
		MetaModel::Init_DefineTransition("monitored", "ev_close", array(
            "target_state"=>"closed",
            "actions"=>array(array('verb' => 'SetCurrentDate', 'params' => array(array('type' => 'attcode', 'value' => "close_date")))),
            "user_restriction"=>null,
            "attribute_list"=>array(
                'private_log' => OPT_ATT_MUSTPROMPT,
            )
        ));
		MetaModel::Init_DefineTransition("monitored", "ev_reexecute", array(
            "target_state"=>"executed",
            "actions"=>array(),
            "user_restriction"=>null,
            "attribute_list"=>array(
                'private_log' => OPT_ATT_MUSTPROMPT,
            )
        ));
		MetaModel::Init_DefineState(
			"closed",
			array(
				"attribute_inherit" => '',
				"attribute_list" => array(
					'agent_id' => OPT_ATT_READONLY,
					'calculated_end_date' => OPT_ATT_READONLY,
					'caller_id' => OPT_ATT_READONLY,
					'close_date' => OPT_ATT_READONLY,
					'constraints' => OPT_ATT_READONLY,
					'contacts_list' => OPT_ATT_READONLY,
					'contingency_reserve' => OPT_ATT_READONLY,
					'costs_spent' => OPT_ATT_READONLY,
					'creation_date' => OPT_ATT_READONLY,
					'description' => OPT_ATT_READONLY,
					'end_date' => OPT_ATT_READONLY,
					'estimated_budget' => OPT_ATT_READONLY,
					'exclusions' => OPT_ATT_READONLY,
					'functionalcis_list' => OPT_ATT_READONLY,
					'last_update' => OPT_ATT_READONLY,
					'mgt_reserve_budget' => OPT_ATT_READONLY,
					'org_id' => OPT_ATT_READONLY,
					'private_log' => OPT_ATT_READONLY,
					'projectchanges_list' => OPT_ATT_READONLY,
					'requirement' => OPT_ATT_READONLY,
					'revised_end_date' => OPT_ATT_READONLY,
					'risks_list' => OPT_ATT_READONLY,
					'start_date' => OPT_ATT_READONLY,
					'team_id' => OPT_ATT_READONLY,
					'title' => OPT_ATT_READONLY,
					'wbss_list' => OPT_ATT_READONLY,
					'wbs_cost' => OPT_ATT_READONLY,
				),
			)
		);
		MetaModel::Init_DefineState(
			"cancelled",
			array(
				"attribute_inherit" => 'closed',
				"attribute_list" => array(
					'agent_id' => OPT_ATT_READONLY,
					'caller_id' => OPT_ATT_READONLY,
					'close_date' => OPT_ATT_READONLY,
					'last_update' => OPT_ATT_READONLY,
				),
			)
		);


		MetaModel::Init_SetZListItems('details', array (
  'col:col0' => 
  array (
    'fieldset:Project:GeneralInfo' => 
    array (
      0 => 'title',
      1 => 'org_id',
      2 => 'status',
    ),
    'fieldset:Project:Contacts' => 
    array (
      0 => 'caller_id',
      1 => 'team_id',
      2 => 'agent_id',
    ),
    'fieldset:Project:Budget' => 
    array (
      0 => 'estimated_budget',
      1 => 'mgt_reserve_budget',
      2 => 'wbs_cost',
    ),
  ),
  'col:col1' => 
  array (
    'fieldset:Project:Details' => 
    array (
      0 => 'description',
      1 => 'requirement',
      2 => 'constraints',
      3 => 'exclusions',
    ),
  ),
  'col:col2' => 
  array (
    'fieldset:Project:Dates' => 
    array (
      0 => 'start_date',
      1 => 'end_date',
      2 => 'revised_end_date',
      3 => 'calculated_end_date',
      4 => 'creation_date',
      5 => 'last_update',
      6 => 'close_date',
    ),
  ),
  0 => 'wbss_list',
  1 => 'contacts_list',
  2 => 'functionalcis_list',
));
		MetaModel::Init_SetZListItems('standard_search', array (
  0 => 'org_id',
  1 => 'agent_id',
  2 => 'description',
  3 => 'start_date',
  4 => 'end_date',
  5 => 'last_update',
  6 => 'estimated_budget',
  7 => 'caller_id',
  8 => 'requirement',
  9 => 'exclusions',
  10 => 'constraints',
  11 => 'status',
  12 => 'creation_date',
  13 => 'title',
  14 => 'revised_end_date',
  15 => 'mgt_reserve_budget',
  16 => 'calculated_end_date',
  17 => 'ref',
));
		MetaModel::Init_SetZListItems('default_search', array (
  0 => 'ref',
  1 => 'org_id',
));
		MetaModel::Init_SetZListItems('list', array (
  0 => 'ref',
  1 => 'title',
  2 => 'org_id',
  3 => 'start_date',
  4 => 'end_date',
  5 => 'revised_end_date',
));
;
	}


	/**
						*
						* @author Axelle Bost
						*/
					

							public function OnInsert()
							{
								  parent::OnInsert();
									$this->Set('last_update', time());
									$this->Set('creation_date', time());

							  	//  I copy end date in revised_end date if this one is null
								 if ($this->Get('revised_end_date') == NULL )
		             {
		                  $this->Set('revised_end_date',$this->Get('end_date'));
		             }
							}
					

	/**
						*
						* @author Axelle Bost
						*/
					

							public function OnUpdate()
							{
								parent::OnUpdate();
								$this->Set('last_update', time());
							}
					

	/**
						*
						* @author Axelle Bost
						*/
					

						public function DisplayBareRelations(WebPage $oPage, $bEditMode = false)
						{
		            $iProjectid = $this->GetKey();
		            $sOQLWBS = "SELECT WBS WHERE project_id = :project AND status !='closed'";
		            $sOQLContactProject = "SELECT lnkContactToTicket AS l1 WHERE l1.ticket_id = :project";
		            $sOQLContactWBS = "SELECT lnkContactToWBS AS l2 JOIN WBS AS wbs ON l2.wbs_id=wbs.id WHERE wbs.status NOT IN ('cancel','closed') AND wbs.project_id=:project";

		            $oWBSSet =   new CMDBObjectSet(DBObjectSearch::FromOQL($sOQLWBS), array(), array('project' => $iProjectid));
		            $oContactProjectSet =   new CMDBObjectSet(DBObjectSearch::FromOQL($sOQLContactProject), array(), array('project' => $iProjectid));
		            $oContactWBSSet =   new CMDBObjectSet(DBObjectSearch::FromOQL($sOQLContactWBS), array(), array('project' => $iProjectid));

		            $iWBSSet = $oWBSSet->Count();
		            $iContactProjectSet = $oContactProjectSet->Count();
		            $iContactWBSSet = $oContactWBSSet->Count();
								$iWBSCosts=0;
		            while ($oWBS = $oWBSSet->Fetch())
		            {
		                $iWBSCosts += $oWBS->Get('wbs_cost');
		            }

		            $oPage->SetCurrentTab(Dict::S('Class:Project/Tab:Summary'));
		            $oPage->p(MetaModel::GetClassIcon('DocumentNote').'&nbsp;'.Dict::Format('Class:Project/Tab:Summary+'));

								$oPage->add('<table style="vertical-align:top" class="n-cols-details 2-cols-details" data-mode="view">');
								$oPage->add('<tbody><tr>');
								$oPage->add('<td style="vertical-align:top; width:50%" class="">');
								$oPage->add('<fieldset>');
								$oPage->add('<legend>'.Dict::S('Class:Project:Summary_general').'</legend>');
								$oPage->add('<div class="details">');
								$oPage->add('<div class="field_container field_small" data-attcode="title">');
								$oPage->add('<div class="field_label label"><span title="">'.MetaModel::GetLabel('Project', 'title').'</span></div>');
								$oPage->add('<div class="field_data"><div class="field_value">'.$this->GetAsHTML('title').'</div></div>');
								$oPage->add('</div>');
								$oPage->add('<div class="field_container field_small" data-attcode="status">');
								$oPage->add('<div class="field_label label"><span title="">'.MetaModel::GetLabel('Project', 'status').'</span></div>');
								$oPage->add('<div class="field_data"><div class="field_value">'.$this->GetAsHTML('status').'</div></div>');
								$oPage->add('</div>');
								$oPage->add('<div class="field_container field_small" data-attcode="agent_id">');
								$oPage->add('<div class="field_label label"><span title="">'.MetaModel::GetLabel('Project', 'agent_id').'</span></div>');
								$oPage->add('<div class="field_data"><div class="field_value">'.$this->GetAsHTML('agent_id').'</div></div>');
								$oPage->add('</div>');
								$oPage->add('<div class="field_container field_small" data-attcode="revised_end_date">');
								$oPage->add('<div class="field_label label"><span title="">'.MetaModel::GetLabel('Project', 'revised_end_date').'</span></div>');
								$oPage->add('<div class="field_data"><div class="field_value">'.$this->GetAsHTML('revised_end_date').'</div></div>');
								$oPage->add('</div>');
								$oPage->add('<div class="field_container field_small" data-attcode="calculated_end_date">');
								$oPage->add('<div class="field_label label"><span title="">'.MetaModel::GetLabel('Project', 'calculated_end_date').'</span></div>');
								$oPage->add('<div class="field_data"><div class="field_value">'.$this->GetAsHTML('calculated_end_date').'</div></div>');
								$oPage->add('</div>');
								$oPage->add('</div></div>');
								$oPage->add('</fieldset>');
								$oPage->add('</td>');
								$oPage->add('<td style="vertical-align:top; width:50%" class="">');
								$oPage->add('<fieldset>');
								$oPage->add('<legend>'.Dict::S('Class:Project:Summary_costs').'</legend>');
								$oPage->add('<div class="details">');
								$oPage->add('<div class="field_container field_small" data-attcode="estimated_budget">');
								$oPage->add('<div class="field_label label"><span title="">'.MetaModel::GetLabel('Project', 'estimated_budget').'</span></div>');
								$oPage->add('<div class="field_data"><div class="field_value">'.$this->GetAsHTML('estimated_budget').'</div></div>');
								$oPage->add('</div>');
								$oPage->add('<div class="field_container field_small" data-attcode="costs_spent">');
								$oPage->add('<div class="field_label label"><span title="">'.MetaModel::GetLabel('Project', 'costs_spent').'</span></div>');
								$oPage->add('<div class="field_data"><div class="field_value">'.$this->GetAsHTML('costs_spent').'</div></div>');
								$oPage->add('</div>');
								$oPage->add('<div class="field_container field_small" data-attcode="delivrables_costs">');
								$oPage->add('<div class="field_label label"><span title="">'. Dict::S('Class:Project:Display:delivrables_costs').'</span></div>');
								$oPage->add('<div class="field_data"><div class="field_value">'.$iWBSCosts.'</div></div>');
								$oPage->add('</div>');
								$oPage->add('</div>');
								$oPage->add('</fieldset>');
								$oPage->add('</td>');
								$oPage->add('</tr></tbody></table>');

								if ( $iContactProjectSet> 0)
		            {
		                $aExtraParam = array ('menu'=>true,
			                'zlist' => false,
			                'display_limit'=>false,
			                'view_link'=>false,
			                'extra_fields' => 'category,contact_id,influence,power,allocated_percent,allocated_days',
		                );
		                $oPage->p(MetaModel::GetClassIcon('Contact').'&nbsp;'.Dict::S('Class:WBS/Attribute:contacts_list_proj_displaybare'));
		                $oBlock = new DisplayBlock($oContactProjectSet->GetFilter(), 'list', false);
		                $oBlock->Display($oPage, 'project_contacts', $aExtraParam);
		            }
		            if ( $iContactWBSSet> 0)
		            {
		                $aExtraParam = array ('menu'=>true,
			                'zlist' => false,
			                'display_limit'=>false,
			                'view_link'=>false,
			                'extra_fields' => 'category,contact_id,wbs_id,influence,power,allocated_percent,allocated_days',
		                );
		                $oPage->p(MetaModel::GetClassIcon('Contact').'&nbsp;'.Dict::S('Class:WBS/Attribute:contacts_list_wbs_displaybare'));
		                $oBlock = new DisplayBlock($oContactWBSSet->GetFilter(), 'list', false);
		                $oBlock->Display($oPage, 'WBS_contacts', $aExtraParam);
		            }
		            if ($iWBSSet > 0)
		            {
			              $aExtraParam = array ('menu'=>true, 'display_limit'=>false);
			              $oPage->p(MetaModel::GetClassIcon('WBS').'&nbsp;'.Dict::S('Class:Project/Attribute:wbss_list_displaybare'));
			              $oBlock = new DisplayBlock($oWBSSet->GetFilter(), 'list', false);
			              $oBlock->Display($oPage, 'project_open_deliverables', $aExtraParam);

		                $aScope = array(
											'title' => Dict::S('GanttDashlet/Label'),
											'oql' =>  'SELECT WBS WHERE project_id = '.$iProjectid.' AND status !=\'cancel\'',
											'extra_params'=>'',
											'depends_on' => 'wbss_parent_list',
											'target_depends_on' =>'parent_wbs_id',
											'label' => 'name',
											'start_date' => 're_estimated_start_date',
											'end_date' =>'re_estimated_end_date',
											'additional_info1' => 'wbs_owner_id_friendlyname',
											'additional_info2' => '',
											'percentage' => 'completion',
											'parent' => 'project_id',
											'class' => 'WBS',
											'status' => 'status',
											'status_active' => array('running'),
											'status_suspended' => array('cancel'),
											'status_waiting' => array('pending_parent'),
											'status_done' => array('closed'),
										  'status_failed' => array(''),
											'save_allowed' => false,
											'parent_fields'=>array(
													'class' => 'Project',
													'label' => 'title',
													'start_date' => 'start_date',
													'end_date' =>'end_date',
													'additional_info1' => 'agent_id_friendlyname',
													'additional_info2' => '',
													'percentage' => '',
													'parent' => '',
											)
										);
										$oPage->add('<fieldset>');
										$oPage->add('<legend>'.Dict::S('GanttDashlet/Label').'</legend>');
										$oView = new Gantt($aScope);
										$oView->Display($oPage);
										if($oPage->isPrintableVersion())
										{
										     $oPage->add_ready_script('fKBInitCallback();');
										     $oPage->add_ready_script('$(".gant-container").css("max-width",$(".printable-content").width()-24);');
										     $oPage->add_ready_script('$("[name=text]").on("click", function() {  $(".gant-container").css("max-width",$(".printable-content").width()-24);});');
										}
										else
							      {
									      $oPage->add_ready_script('setTimeout( function(){ if($("ul >li > [data-tab-id=Summary]").closest("li").hasClass( "ui-tabs-active" )){ fKBInitCallback(); }}, 500);');
												$oPage->add_ready_script('$("ul >li > [data-tab-id=Summary]").click( function() { setTimeout( function(){ if (ge!=null) { ge.resize(); } else { fKBInitCallback(); }}, 500); });');
										}
										$oPage->add('</fieldset>');
		            }

						    parent::DisplayBareRelations($oPage, $bEditMode);
						    $oPage->RemoveTab('Ticket:ImpactAnalysis');
					  }
				

	/**
						*
						* @author Axelle Bost
						*/
					

						public function GetProjectEndDates()
						{
				       if ( $this->Get('revised_end_date') != NULL  )
	             {
	                 $sEndDateProject = $this->Get('revised_end_date');
	             }
	             else
	             {
	                $sEndDateProject = $this->Get('end_date');
	             }
	             $iEndDateProject = AttributeDateTime::GetAsUnixSeconds($sEndDateProject);
	             if ($iEndDateProject != NULL)
	             {
	                return array('end_date_project_integer'=> $iEndDateProject, 'end_date_project_string'=> $sEndDateProject);
	             }
						}
					

	/**
						*
						* @author Axelle Bost
						*/
					

							public function DoCheckToWrite()
							{
								  parent::DoCheckToWrite();
						      if ($this->Get('start_date') > $this->Get('end_date'))
						      {
						         $this->m_aCheckIssues[] = Dict::Format('Project:Error:EndDateMustBeGreaterThanStartDate');
						      }
						      if ($this->Get('calculated_end_date') > $this->Get('revised_end_date'))
						      {
						        $this->m_aCheckIssues[] = Dict::Format('Project:Error:ProjectEndDateMustBeGreaterThanWBSEndDate');
						      }
							}
					

	/**
						*
						* @author Axelle Bost
						* @return bool Return true on success or false to prevent the transition to happen
						*/
					

							public function PrefillCreationForm(&$aContextParam)
							{
							    if (empty($this->Get('start_date')))
							    {
							        $this->Set('start_date', time());
							    }
							}
						

	/**
						*
						* @author Axelle Bost
						*/
					

							public static function GetTicketRefFormat()
							{
								return 'Proj-%06d';
							}
						

}


class WBS extends cmdbAbstractObject
{
	public static function Init()
	{
		$aParams = array(			'category' => 'bizmodel,searchable',
			'key_type' => 'autoincrement',
			'name_attcode' => array('ref', 'name'),
			'state_attcode' => 'status',
			'reconc_keys' => array('ref'),
			'db_table' => 'wbs',
			'db_key_field' => 'id',
			'db_finalclass_field' => '',
			'icon' => utils::GetAbsoluteUrlModulesRoot().'combodo-pmp-light/../combodo-pmp-light/asset/img/WBS.png',
			'uniqueness_rules' => array (
),);
		MetaModel::Init_Params($aParams);
		MetaModel::Init_InheritAttributes();
		MetaModel::Init_AddAttribute(new AttributeString("name", array("allowed_values"=>null, "sql"=>'name', "default_value"=>'', "is_null_allowed"=>true, "depends_on"=>array(), "always_load_in_tables"=>false)));
		MetaModel::Init_AddAttribute(new AttributeExternalKey("project_id", array("targetclass"=>'Project', "allowed_values"=>new ValueSetObjects("SELECT Project WHERE status !=\"close\""), "sql"=>'project_id', "is_null_allowed"=>true, "on_target_delete"=>DEL_AUTO, "depends_on"=>array('title'), "display_style"=>'select', "always_load_in_tables"=>false)));
		MetaModel::Init_AddAttribute(new AttributeDateTime("start_date", array("allowed_values"=>null, "sql"=>'start_date', "default_value"=>'', "is_null_allowed"=>true, "depends_on"=>array(), "always_load_in_tables"=>false, "tracking_level"=>ATTRIBUTE_TRACKING_ALL)));
		MetaModel::Init_AddAttribute(new AttributeHTML("description", array("allowed_values"=>null, "sql"=>'description', "default_value"=>'', "is_null_allowed"=>true, "depends_on"=>array(), "always_load_in_tables"=>false)));
		MetaModel::Init_AddAttribute(new AttributeDateTime("end_date", array("allowed_values"=>null, "sql"=>'end_date', "default_value"=>'', "is_null_allowed"=>true, "depends_on"=>array(), "always_load_in_tables"=>false, "tracking_level"=>ATTRIBUTE_TRACKING_ALL)));
		MetaModel::Init_AddAttribute(new AttributeExternalKey("wbs_owner_id", array("targetclass"=>'Person', "allowed_values"=>null, "sql"=>'wbs_owner_id', "is_null_allowed"=>true, "on_target_delete"=>DEL_AUTO, "depends_on"=>array('name'), "display_style"=>'select', "always_load_in_tables"=>false)));
		MetaModel::Init_AddAttribute(new AttributeDecimal("wbs_budget", array("allowed_values"=>null, "sql"=>'wbs_budget', "default_value"=>'', "is_null_allowed"=>true, "depends_on"=>array(), "digits"=>8, "decimals"=>2, "always_load_in_tables"=>false)));
		MetaModel::Init_AddAttribute(new AttributeHTML("acceptance", array("allowed_values"=>null, "sql"=>'acceptance', "default_value"=>'', "is_null_allowed"=>true, "depends_on"=>array(), "always_load_in_tables"=>false)));
		MetaModel::Init_AddAttribute(new AttributeTemplateText("technical_info", array("allowed_values"=>null, "sql"=>'technical_info', "default_value"=>'', "is_null_allowed"=>true, "depends_on"=>array(), "always_load_in_tables"=>false)));
		MetaModel::Init_AddAttribute(new AttributeDecimal("wbs_cost", array("allowed_values"=>null, "sql"=>'wbs_cost', "default_value"=>'', "is_null_allowed"=>true, "depends_on"=>array(), "digits"=>9, "decimals"=>2, "always_load_in_tables"=>false)));
		MetaModel::Init_AddAttribute(new AttributeDecimal("labor_cost", array("allowed_values"=>null, "sql"=>'labor_cost', "default_value"=>'', "is_null_allowed"=>true, "depends_on"=>array(), "digits"=>8, "decimals"=>2, "always_load_in_tables"=>false)));
		MetaModel::Init_AddAttribute(new AttributeDecimal("material_cost", array("allowed_values"=>null, "sql"=>'material_cost', "default_value"=>'', "is_null_allowed"=>true, "depends_on"=>array(), "digits"=>8, "decimals"=>2, "always_load_in_tables"=>false)));
		MetaModel::Init_AddAttribute(new AttributeDateTime("re_estimated_end_date", array("allowed_values"=>null, "sql"=>'re_estimated_end_date', "default_value"=>'', "is_null_allowed"=>true, "depends_on"=>array(), "always_load_in_tables"=>false, "tracking_level"=>ATTRIBUTE_TRACKING_ALL)));
		MetaModel::Init_AddAttribute(new AttributeEnum("status", array("allowed_values"=>new ValueSetEnum("running,closed,pending_parent,cancel"), "display_style"=>'list', "sql"=>'status', "default_value"=>'running', "is_null_allowed"=>true, "depends_on"=>array('name', 'project_id'), "always_load_in_tables"=>false)));
		MetaModel::Init_AddAttribute(new AttributePercentageCompletion("completion", array("allowed_values"=>null, "sql"=>'completion', "default_value"=>'', "is_null_allowed"=>true, "depends_on"=>array(), "always_load_in_tables"=>false)));
		MetaModel::Init_AddAttribute(new AttributeDuration("freetime", array("allowed_values"=>null, "sql"=>'freetime', "default_value"=>'', "is_null_allowed"=>true, "depends_on"=>array(), "always_load_in_tables"=>false)));
		MetaModel::Init_AddAttribute(new AttributeDateTime("re_estimated_start_date", array("allowed_values"=>null, "sql"=>'re_estimated_start_date', "default_value"=>'', "is_null_allowed"=>true, "depends_on"=>array(), "always_load_in_tables"=>false, "tracking_level"=>ATTRIBUTE_TRACKING_ALL)));
		MetaModel::Init_AddAttribute(new AttributeDecimal("available_budget", array("allowed_values"=>null, "sql"=>'available_budget', "default_value"=>'', "is_null_allowed"=>true, "depends_on"=>array(), "digits"=>8, "decimals"=>2, "always_load_in_tables"=>false)));
		MetaModel::Init_AddAttribute(new AttributeLinkedSetIndirect("wbss_child_list", array("linked_class"=>'lnkWBSToWBS', "ext_key_to_me"=>'parent_wbs_id', "ext_key_to_remote"=>'child_wbs_id', "allowed_values"=>null, "count_min"=>0, "count_max"=>0, "duplicates"=>false, "depends_on"=>array(), "always_load_in_tables"=>false)));
		MetaModel::Init_AddAttribute(new AttributeLinkedSetIndirect("wbss_parent_list", array("linked_class"=>'lnkWBSToWBS', "ext_key_to_me"=>'child_wbs_id', "ext_key_to_remote"=>'parent_wbs_id', "allowed_values"=>null, "count_min"=>0, "count_max"=>0, "duplicates"=>false, "depends_on"=>array(), "always_load_in_tables"=>false)));
		MetaModel::Init_AddAttribute(new AttributeDuration("time_planned", array("allowed_values"=>null, "sql"=>'time_planned', "default_value"=>'', "is_null_allowed"=>true, "depends_on"=>array(), "always_load_in_tables"=>false)));
		MetaModel::Init_AddAttribute(new AttributeDuration("delay", array("allowed_values"=>null, "sql"=>'delay', "default_value"=>'', "is_null_allowed"=>true, "depends_on"=>array(), "always_load_in_tables"=>false)));
		MetaModel::Init_AddAttribute(new AttributeString("ref", array("allowed_values"=>null, "sql"=>'ref', "default_value"=>'', "is_null_allowed"=>true, "depends_on"=>array(), "always_load_in_tables"=>false)));
		MetaModel::Init_AddAttribute(new AttributeCaseLog("wbs_log", array("allowed_values"=>null, "sql"=>'wbs_log', "default_value"=>'', "is_null_allowed"=>true, "depends_on"=>array(), "always_load_in_tables"=>false)));
		MetaModel::Init_AddAttribute(new AttributeLinkedSetIndirect("contacts_list", array("linked_class"=>'lnkContactToWBS', "ext_key_to_me"=>'wbs_id', "ext_key_to_remote"=>'contact_id', "allowed_values"=>null, "count_min"=>0, "count_max"=>0, "duplicates"=>false, "depends_on"=>array(), "always_load_in_tables"=>false)));

		// Lifecycle (status attribute: status)
		//
		MetaModel::Init_DefineStimulus(new StimulusUserAction("ev_cancel", array()));
		MetaModel::Init_DefineStimulus(new StimulusUserAction("ev_closed", array()));
		MetaModel::Init_DefineStimulus(new StimulusInternal("ev_pending_parent", array()));
		MetaModel::Init_DefineStimulus(new StimulusInternal("ev_running", array()));
		MetaModel::Init_DefineStimulus(new StimulusUserAction("ev_running_admin", array()));
		MetaModel::Init_DefineStimulus(new StimulusUserAction("ev_reopen", array()));
		MetaModel::Init_DefineState(
			"running",
			array(
				"attribute_inherit" => '',
				"attribute_list" => array(
					'end_date' => OPT_ATT_MANDATORY,
					'freetime' => OPT_ATT_READONLY,
					'project_id' => OPT_ATT_MANDATORY,
					'start_date' => OPT_ATT_MANDATORY,
					'available_budget' => OPT_ATT_READONLY,
					'name' => OPT_ATT_MANDATORY,
				),
			)
		);
		MetaModel::Init_DefineTransition("running", "ev_pending_parent", array(
            "target_state"=>"pending_parent",
            "actions"=>array(),
            "user_restriction"=>null,
            "attribute_list"=>array(
            )
        ));
		MetaModel::Init_DefineTransition("running", "ev_cancel", array(
            "target_state"=>"cancel",
            "actions"=>array(),
            "user_restriction"=>null,
            "attribute_list"=>array(
            )
        ));
		MetaModel::Init_DefineTransition("running", "ev_closed", array(
            "target_state"=>"closed",
            "actions"=>array(array('verb' => 'StartChildWBS', 'params' => array(array('type' => 'reference', 'value' => 'sStimulusCode'))), array('verb' => 'Set', 'params' => array(array('type' => 'attcode', 'value' => "completion"), array('type' => 'string', 'value' => "100")))),
            "user_restriction"=>null,
            "attribute_list"=>array(
            )
        ));
		MetaModel::Init_DefineState(
			"closed",
			array(
				"attribute_inherit" => 'running',
				"attribute_list" => array(
					'delay' => OPT_ATT_HIDDEN,
					'acceptance' => OPT_ATT_READONLY,
					'completion' => OPT_ATT_READONLY,
					'description' => OPT_ATT_READONLY,
					'end_date' => OPT_ATT_MANDATORY | OPT_ATT_READONLY,
					'freetime' => OPT_ATT_READONLY,
					'labor_cost' => OPT_ATT_READONLY,
					'material_cost' => OPT_ATT_READONLY,
					'name' => OPT_ATT_MANDATORY | OPT_ATT_READONLY,
					'project_id' => OPT_ATT_MANDATORY | OPT_ATT_READONLY,
					're_estimated_end_date' => OPT_ATT_READONLY,
					're_estimated_start_date' => OPT_ATT_READONLY,
					'start_date' => OPT_ATT_MANDATORY | OPT_ATT_READONLY,
					'technical_info' => OPT_ATT_READONLY,
					'time_planned' => OPT_ATT_READONLY,
					'wbss_child_list' => OPT_ATT_READONLY,
					'wbss_parent_list' => OPT_ATT_READONLY,
					'wbs_budget' => OPT_ATT_READONLY,
					'wbs_cost' => OPT_ATT_READONLY,
					'wbs_log' => OPT_ATT_READONLY,
					'wbs_owner_id' => OPT_ATT_READONLY,
				),
			)
		);
		MetaModel::Init_DefineTransition("closed", "ev_reopen", array(
            "target_state"=>"running",
            "actions"=>array(array('verb' => 'SuspendChildWBS', 'params' => array(array('type' => 'reference', 'value' => 'sStimulusCode')))),
            "user_restriction"=>null,
            "attribute_list"=>array(
            )
        ));
		MetaModel::Init_DefineState(
			"pending_parent",
			array(
				"attribute_inherit" => 'running',
				"attribute_list" => array(
					'available_budget' => OPT_ATT_NORMAL,
					'delay' => OPT_ATT_HIDDEN,
				),
			)
		);
		MetaModel::Init_DefineTransition("pending_parent", "ev_running", array(
            "target_state"=>"running",
            "actions"=>array(),
            "user_restriction"=>null,
            "attribute_list"=>array(
            )
        ));
		MetaModel::Init_DefineTransition("pending_parent", "ev_running_admin", array(
            "target_state"=>"running",
            "actions"=>array(),
            "user_restriction"=>null,
            "attribute_list"=>array(
            )
        ));
		MetaModel::Init_DefineState(
			"cancel",
			array(
				"attribute_inherit" => 'closed',
				"attribute_list" => array(
					'delay' => OPT_ATT_HIDDEN,
				),
			)
		);

		// Higlight Scale
		MetaModel::Init_DefineHighlightScale( array(
		));

		MetaModel::Init_SetZListItems('details', array (
  'col:col0' => 
  array (
    'fieldset:WBS:Info' => 
    array (
      0 => 'name',
      1 => 'project_id',
      2 => 'wbs_owner_id',
      3 => 'status',
      4 => 'description',
      5 => 'acceptance',
      6 => 'technical_info',
    ),
  ),
  'col:col1' => 
  array (
    'fieldset:WBS:Cost' => 
    array (
      0 => 'wbs_budget',
      1 => 'labor_cost',
      2 => 'material_cost',
      3 => 'wbs_cost',
      4 => 'available_budget',
    ),
    'fieldset:WBS:Execution' => 
    array (
      0 => 'time_planned',
      1 => 'completion',
    ),
  ),
  'col:col2' => 
  array (
    'fieldset:WBS:Dates' => 
    array (
      0 => 'start_date',
      1 => 'end_date',
      2 => 're_estimated_start_date',
      3 => 're_estimated_end_date',
      4 => 'freetime',
    ),
  ),
  0 => 'wbss_child_list',
  1 => 'wbss_parent_list',
  2 => 'contacts_list',
));
		MetaModel::Init_SetZListItems('standard_search', array (
  0 => 'name',
  1 => 'project_id',
  2 => 'start_date',
  3 => 'description',
  4 => 'end_date',
  5 => 'wbs_owner_id',
  6 => 'wbs_budget',
  7 => 'acceptance',
  8 => 'technical_info',
  9 => 'wbs_cost',
  10 => 'labor_cost',
  11 => 'material_cost',
  12 => 're_estimated_end_date',
  13 => 'status',
  14 => 'completion',
  15 => 'freetime',
  16 => 're_estimated_start_date',
  17 => 'available_budget',
  18 => 'time_planned',
  19 => 'delay',
));
		MetaModel::Init_SetZListItems('default_search', array (
  0 => 'name',
  1 => 'project_id',
  2 => 'start_date',
  3 => 'ref',
));
		MetaModel::Init_SetZListItems('list', array (
  0 => 'project_id',
  1 => 'start_date',
  2 => 'end_date',
  3 => 're_estimated_start_date',
  4 => 're_estimated_end_date',
  5 => 'freetime',
  6 => 'completion',
  7 => 'wbs_owner_id',
  8 => 'status',
));
;
	}


	/**
						*
						* @author Axelle Bost
						*/
					

							public function GetInitialStateAttributeFlags($sAttCode, &$aReasons = array())
							{
						        if ((MetaModel::IsValidAttCode('WBS','wbs_cost')) && ($sAttCode == 'wbs_cost'))
						        {
						            return OPT_ATT_READONLY;
						        }

						        $aLimitedAttributes = array('re_estimated_start_date','re_estimated_end_date','delay','wbss_child_list');
						        if (in_array($sAttCode, $aLimitedAttributes))
						        {
						            return(OPT_ATT_HIDDEN | parent::GetInitialStateAttributeFlags($sAttCode, $aReasons));
						        }
						        else
						        {
						            return parent::GetInitialStateAttributeFlags($sAttCode, $aReasons);
						        }
							}
						

	/**
						*
						* @author Axelle Bost
						*/
					


							public function GetAttributeFlags($sAttCode, &$aReasons = array(), $sTargetState = '')
							{
									if ((MetaModel::IsValidAttCode('WBS','delay')) && ($sAttCode == 'delay'))
			            {
			                return OPT_ATT_HIDDEN;
			            }
							    $aLimitedAttributes = array('start_date','end_date','wbs_cost','wbss_child_list');
							    if (in_array($sAttCode, $aLimitedAttributes))

			            {
			                return(OPT_ATT_READONLY | parent::GetAttributeFlags($sAttCode, $aReasons));
			            }
			            else
			            {
			                return parent::GetAttributeFlags($sAttCode, $aReasons);
			            }
							}
						

	/**
						*
						* @author Axelle Bost
						*/
					

							public function OnInsert()
							{
										 parent::OnInsert();

						         $this->WBS_costs_budget();
						         $this->SetProjectWBScalculated();
						         $aInitialDates = array();
						         $aInitialDates = $this->SetWBSStartEndDates();

						         if (MetaModel::IsValidAttCode('WBS','freetime'))
						         {
						              $this->Set('freetime',$aInitialDates['freetime_integer']);
						         }

						          // I copy start date in estimate_start date
						         if ($this->Get('re_estimated_start_date') == NULL )
						         {
						               $this->Set('re_estimated_start_date',$this->Get('start_date'));
						         }

						         //  I copy end date in estimate_end date
						         if ($this->Get('re_estimated_end_date') == NULL )
						         {
						              $this->Set('re_estimated_end_date',$this->Get('end_date'));
						         }
						         // I set delay to be used in future for calculation
						         $this->Set('delay',$aInitialDates['delay']);
							}
						

	/**
						*
						* @author Axelle Bost
						*/
					


							public function OnUpdate()
							{
				         parent::OnUpdate();
				         $this->WBS_costs_budget();
				         $this->SetProjectWBScalculated();
				         $aInitialDates = array();
				         $aInitialDates = $this->SetWBSStartEndDates();
				         if (MetaModel::IsValidAttCode('WBS','freetime'))
				         {
				             $this->Set('freetime',$aInitialDates['freetime_integer']);
				         }

				          //Im on child, I look for my parents
				          $oParentWBSSet = $this->Get('wbss_parent_list');
				          if ($oParentWBSSet->Count() > 0)
				          {
				              $oParentWBSSet->Rewind();
				              $bParentActive=false;
				              while ($oLink = $oParentWBSSet->Fetch())
				              {
					                $iKey = $oLink->Get('parent_wbs_id');
					                $oParentWBS = MetaModel::GetObject('WBS', $iKey);
					                if (!in_array($oParentWBS->Get('status'),array('cancel','closed')))
					                {
						                  if ($oParentWBS->Get('re_estimated_end_date') > $this->Get('re_estimated_start_date'))
						                  {
						                       $this->Set('re_estimated_start_date',$oParentWBS->Get('re_estimated_end_date'));
						                       $iNewStartDate = AttributeDateTime::GetAsUnixSeconds($oParentWBS->Get('re_estimated_end_date'));
						                       $iEndDate = $iNewStartDate+$this->Get('delay');
						                       $this->Set('re_estimated_end_date',$iEndDate);
						                  }
						                  $bParentActive=true;
					                }
				              }
				              if ($bParentActive && ($this->Get('status') == 'running'))
				              {
					                $this->ApplyStimulus('ev_pending_parent');
				              }
				          }
				          else
				          {
					           if ($this->Get('status') == 'pending_parent')
					           {
						              $this->ApplyStimulus('ev_running');
					           }
				          }

				          //I updated my startdate or enddate (due to parent WBS or not)
				           $aChanges = $this->ListChanges();
				           if (array_key_exists('re_estimated_start_date', $aChanges) || array_key_exists('re_estimated_end_date', $aChanges))
				           {
				               $iStartDate = AttributeDateTime::GetAsUnixSeconds($this->Get('re_estimated_start_date'));
				               $iEndDate = AttributeDateTime::GetAsUnixSeconds($this->Get('re_estimated_end_date'));
				               $idelay = $iEndDate - $iStartDate;
				               // I update delay to be used in future for calculation
				               $this->Set('delay',$idelay);
				           }
							}

						

	/**
						*
						* @author Axelle Bost
						* @return bool Return true on success or false to prevent the transition to happen
						*/
					

							public function StartChildWBS()
							{
						      // check my dependant deliverable
						      $sOQLchild = "SELECT WBS AS child JOIN lnkWBSToWBS AS ln ON ln.child_wbs_id=child.id  WHERE ln.parent_wbs_id=:parent_wbs AND child.id != :parent_wbs";
						      $oChildWBSSet = new DBObjectSet(DBObjectSearch::FromOQL($sOQLchild), array(), array('parent_wbs' => $this->GetKey()));
						      $iParentToExclude = $this->GetKey();

						      while ($oChildWBS = $oChildWBSSet->Fetch())
						      {
						           // for each child, check if it has another parent deliverable not closed
						           $sOQL = "SELECT WBS AS parent JOIN lnkWBSToWBS AS ln ON ln.parent_wbs_id=parent.id  WHERE ln.child_wbs_id=:child_wbs AND parent.id !=:child_wbs AND parent.id != $iParentToExclude AND $iParentToExclude != :child_wbs AND parent.status NOT IN ('closed','cancel')";
						           $oParentChildWBSSet = new DBObjectSet(DBObjectSearch::FromOQL($sOQL), array(), array('child_wbs' => $oChildWBS->GetKey()));

						           if (($oParentChildWBSSet->Count() == 0) && ($oChildWBS->Get('status') == 'pending_parent'))
						           {
						                $oChildWBS->ApplyStimulus('ev_running');
						           }
						      }
						      return true;
							}
						

	/**
						*
						* @author Axelle Bost
						*/
					


							public function AfterInsert()
							{
				          parent::AfterInsert();
				          //Im on child, I look for my parents
				          $sOQL = "SELECT WBS AS parent JOIN lnkWBSToWBS AS ln ON ln.parent_wbs_id=parent.id WHERE ln.child_wbs_id=:child_wbs AND parent.status NOT IN ('closed','cancel')";
				          $oParentWBSSet = new DBObjectSet(DBObjectSearch::FromOQL($sOQL), array('re_estimated_end_date' => false), array('child_wbs' => $this->GetKey()));
				          if ($oParentWBSSet->Count() > 0)
				          {
				             while ($oParentWBS = $oParentWBSSet->Fetch())
				             {
				                if ($oParentWBS->Get('re_estimated_end_date') > $this->Get('re_estimated_start_date'))
				                {
				                     $this->Set('re_estimated_start_date',$oParentWBS->Get('re_estimated_end_date'));
				                     $iNewStartDate = AttributeDateTime::GetAsUnixSeconds($oParentWBS->Get('re_estimated_end_date'));
				                     $iEndDate = $iNewStartDate+$this->Get('delay');
				                     $this->Set('re_estimated_end_date',$iEndDate);
				                }
				              }
				              $this->ApplyStimulus('ev_pending_parent');
				              $this->DBUpdate();
				          }
				          $this->SetProjectCalculatedEndDate();
							}

						

	/**
						*
						* @author Axelle Bost
						*/
					


							public function AfterUpdate()
							{
						      parent::AfterUpdate();
						      $this->SetProjectCalculatedEndDate();
					        $this->StartChildWBS();

					        // check my dependant deliverable
						      $sOQLchild = "SELECT WBS AS child JOIN lnkWBSToWBS AS ln ON ln.child_wbs_id=child.id  WHERE ln.parent_wbs_id=:parent_wbs AND child.id != :parent_wbs";
						      $oChildWBSSet = new DBObjectSet(DBObjectSearch::FromOQL($sOQLchild), array(), array('parent_wbs' => $this->GetKey()));
						      $iParentToExclude = $this->GetKey();

						      while ($oChildWBS = $oChildWBSSet->Fetch())
						      {
						          if ($oChildWBS->Get('re_estimated_start_date') < $this->Get('re_estimated_end_date'))
						          {
						               $oChildWBS->Set('re_estimated_start_date',$this->Get('re_estimated_end_date'));
						               $iNewStartDate = AttributeDateTime::GetAsUnixSeconds($this->Get('re_estimated_end_date'));
						               $iEndDate = $iNewStartDate+$oChildWBS->Get('delay');
						               $oChildWBS->Set('re_estimated_end_date',$iEndDate);
						               $oChildWBS->DBUpdate();
						               //I postpone end date of my dependant deliverable
						          }
						      }
							}
						

	/**
						*
						* @author Axelle Bost
						*/
					


							public function WBS_costs_budget()
							{
					        if ( ($this->Get('labor_cost') != NULL) || ($this->Get('material_cost') != NULL ) )
	                {
                      $iWBScost= ($this->Get('labor_cost') + $this->Get('material_cost'));
                      $this->Set('wbs_cost', $iWBScost);
	                }
		              if  ($this->Get('wbs_budget') != NULL)
		              {
	                    $iWBSfreebudget = ($this->Get('wbs_budget') - $iWBScost);
	                    $this->Set('available_budget', $iWBSfreebudget);
		              }
							}

						

	/**
						*
						* @author Axelle Bost
						*/
					

							public function SetWBSStartEndDates()
							{
							   //if re_estimated_start_date is set on ticket, it will be considered instead of start_date
				         if ($this->Get('re_estimated_start_date') == NULL )
	               {
	                     $sStartDate = $this->Get('start_date');
	               }
				         else
	               {
	                   $sStartDate = $this->Get('re_estimated_start_date');
	               }
				         //if re_estimated_end_date is set set on source ticket, it will be considered instead of end_date
				         if ($this->Get('re_estimated_end_date') == NULL )
	               {
	                    $sEndDate = $this->Get('end_date');
	               }
				         else
	               {
	                    $sEndDate = $this->Get('re_estimated_end_date');
	               }

				         $iStartDate = AttributeDateTime::GetAsUnixSeconds($sStartDate);
				         $iEndDate = AttributeDateTime::GetAsUnixSeconds($sEndDate);
				         $idelay = $iEndDate - $iStartDate;
				         $oNow = new DateTime();
				         $ifreeTime = ($iEndDate - $oNow->format('U'));
				         return array('start_date_integer'=> $iStartDate, 'end_date_integer'=> $iEndDate, 'delay'=> $idelay, 'start_date_string'=> $sStartDate, 'end_date_string'=> $sEndDate, 'freetime_integer' => $ifreeTime );
							}
						

	/**
						*
						* @author Axelle Bost
						*/
					

						public function MakeTicketRef($iNextId)
						{
								$sFormat = 'Del-%06d';
					      return sprintf($sFormat, $iNextId);
						}
						

	/**
						*
						* @author Axelle Bost
						*/
					

						public function DBInsertNoReload()
						{
							    $iNextId = ItopCounter::incClass(get_class($this));
					        $sRef = $this->MakeTicketRef($iNextId);
					        $this->Set('ref', $sRef);
					        $iKey = parent::DBInsertNoReload();
					        return $iKey;
						}
						

	/**
						*
						* @author Axelle Bost
						* @return bool Return true on success or false to prevent the transition to happen
						*/
					

							public function PrefillCreationForm(&$aContextParam)
							{
							    if (empty($this->Get('start_date')))
							    {
							        $this->Set('start_date', time());
							    }
							}
						

	/**
						*
						* @author Axelle Bost
						*/
					

							public function DoCheckToWrite()
							{
								  parent::DoCheckToWrite();
						      if (($this->Get('start_date') > $this->Get('end_date')) || ($this->Get('re_estimated_start_date') > $this->Get('re_estimated_end_date')))
						      {
						         $this->m_aCheckIssues[] = Dict::Format('Project:Error:EndDateMustBeGreaterThanStartDate');
						      }
						      $oParentWBSSet = $this->Get('wbss_parent_list');
						      if ($oParentWBSSet->Count() > 0)
						      {
						          $oParentWBSSet->Rewind();
						          while ($oLink = $oParentWBSSet->Fetch())
						          {
							           $iKey = $oLink->Get('parent_wbs_id');
							           if ($this->GetKey()== $iKey)
							           {
							             $this->m_aCheckIssues[] = Dict::Format('WBS:Error:ParentCantBeChildren');
							           }
						          }
						      }
							}
						

	/**
						*
						* @author Axelle Bost
						*/
					

							public function SetProjectCalculatedEndDate()
							{
						      //deliverable is attached to a project
				          if ($this->Get('project_id') != 0)
		              {
	                   $oProject = MetaModel::GetObject('Project', $this->Get('project_id'));
	                   //if project calculated end date is below end date of deliverable
	                   if ($oProject->Get('calculated_end_date') < $this->Get('re_estimated_end_date'))
	                   {
	                        //I set project calculated end date = end date of deliverable
	                        $oProject->Set('calculated_end_date', $this->Get('re_estimated_end_date'));
	                        //If project revised end date is below to end date of deliverable
	                        if ($oProject->Get('revised_end_date') < $this->Get('re_estimated_end_date'))
	                        {
	                            $oProject->Set('revised_end_date', $this->Get('re_estimated_end_date'));
	                        }
	                        $oProject->DBUpdate();
	                   }
		              }
							}
						

	/**
						*
						* @author Axelle Bost
						*/
					

							public function SetProjectWBScalculated()
							{
									// Costs of all project's WBS related are added to wbs_cost field of project associated
			            $iProjectId = $this->Get('project_id');
							    $sOQLWBS =  "SELECT WBS WHERE project_id = :project AND status NOT IN ('cancel')";
							    $oWBSSet =  new CMDBObjectSet(DBObjectSearch::FromOQL($sOQLWBS), array(), array('project' => $iProjectId));
							    $iWBSCosts = 0;
							    while ($oWBS = $oWBSSet->Fetch())
			            {
		                  $iWBSCosts += $oWBS->Get('wbs_cost');
			            }
					        $oProject = MetaModel::GetObject('Project', $iProjectId, false);
			            $oProject->Set('wbs_cost',$iWBSCosts);
			            $oProject->DBUpdate();
							}
						

	/**
						*
						* @author Axelle Bost
						* @return bool Return true on success or false to prevent the transition to happen
						*/
					

						public function PrefillSearchForm(&$aContextParam)
						{
						    // If we want to search for objects of class 'WBS' or a sub-class of 'WBS'
						    if ($aContextParam['dest_class'] == 'WBS' || is_subclass_of($aContextParam['dest_class'], 'WBS'))
						    {
						        // If 'project_id' of the source WBS is not empty
						        if (!empty($this->Get('project_id')))
						        {
						            // We remove any criteria set by the default search
						            $aContextParam['filter']->ResetCondition();
						            // We set a criteria on the 'org_id' of the searched class with the Contract provider value
						            $aContextParam['filter']->AddCondition('project_id', $this->Get('project_id'));
						        }
						    }
						    return true;
						}
						

	/**
						*
						* @author Axelle Bost
						* @return bool Return true on success or false to prevent the transition to happen
						*/

							public function SuspendChildWBS()
							{
					      	// check my dependant deliverable
				          $sOQLchild = "SELECT WBS AS child JOIN lnkWBSToWBS AS ln ON ln.child_wbs_id=child.id  WHERE ln.parent_wbs_id=:parent_wbs AND child.id != :parent_wbs";
				          $oChildWBSSet = new DBObjectSet(DBObjectSearch::FromOQL($sOQLchild), array(), array('parent_wbs' => $this->GetKey()));
				          $iParentToExclude = $this->GetKey();

				          while ($oChildWBS = $oChildWBSSet->Fetch())
				          {
				               // for each child, if its status is running, I block it to pending_parent
				               if ($oChildWBS->Get('status') == 'running')
				               {
				                  $oChildWBS->ApplyStimulus('ev_pending_parent');
				               }
				          }
									return true;
							}
					

}


class lnkWBSToWBS extends cmdbAbstractObject
{
	public static function Init()
	{
		$aParams = array(			'category' => 'bizmodel',
			'key_type' => 'autoincrement',
			'is_link' => true,
			'name_attcode' => array('child_wbs_id', 'parent_wbs_id'),
			'state_attcode' => '',
			'reconc_keys' => array('child_wbs_id', 'parent_wbs_id'),
			'db_table' => 'lnkwbstowbs',
			'db_key_field' => 'id',
			'db_finalclass_field' => '',);
		MetaModel::Init_Params($aParams);
		MetaModel::Init_InheritAttributes();
		MetaModel::Init_AddAttribute(new AttributeExternalKey("child_wbs_id", array("targetclass"=>'WBS', "allowed_values"=>null, "sql"=>'child_wbs_id', "is_null_allowed"=>false, "on_target_delete"=>DEL_AUTO, "depends_on"=>array(), "display_style"=>'select', "always_load_in_tables"=>false)));
		MetaModel::Init_AddAttribute(new AttributeExternalField("child_start_date", array("allowed_values"=>null, "extkey_attcode"=>'child_wbs_id', "target_attcode"=>'re_estimated_start_date', "always_load_in_tables"=>false)));
		MetaModel::Init_AddAttribute(new AttributeExternalField("child_end_date", array("allowed_values"=>null, "extkey_attcode"=>'child_wbs_id', "target_attcode"=>'re_estimated_end_date', "always_load_in_tables"=>false)));
		MetaModel::Init_AddAttribute(new AttributeExternalKey("parent_wbs_id", array("targetclass"=>'WBS', "allowed_values"=>null, "sql"=>'parent_wbs_id', "is_null_allowed"=>false, "on_target_delete"=>DEL_AUTO, "depends_on"=>array(), "display_style"=>'select', "always_load_in_tables"=>false)));
		MetaModel::Init_AddAttribute(new AttributeExternalField("parent_start_date", array("allowed_values"=>null, "extkey_attcode"=>'parent_wbs_id', "target_attcode"=>'re_estimated_start_date', "always_load_in_tables"=>false)));
		MetaModel::Init_AddAttribute(new AttributeExternalField("parent_end_date", array("allowed_values"=>null, "extkey_attcode"=>'parent_wbs_id', "target_attcode"=>'re_estimated_end_date', "always_load_in_tables"=>false)));



		MetaModel::Init_SetZListItems('details', array (
  0 => 'child_wbs_id',
  1 => 'parent_wbs_id',
  2 => 'child_start_date',
  3 => 'child_end_date',
  4 => 'parent_start_date',
  5 => 'parent_end_date',
));
		MetaModel::Init_SetZListItems('standard_search', array (
  0 => 'child_wbs_id',
  1 => 'parent_wbs_id',
));
		MetaModel::Init_SetZListItems('list', array (
  0 => 'child_wbs_id',
  1 => 'parent_wbs_id',
  2 => 'child_start_date',
  3 => 'child_end_date',
  4 => 'parent_start_date',
  5 => 'parent_end_date',
));
;
	}


}


class lnkContactToWBS extends cmdbAbstractObject
{
	public static function Init()
	{
		$aParams = array(			'category' => 'bizmodel',
			'key_type' => 'autoincrement',
			'is_link' => true,
			'name_attcode' => array('contact_id', 'wbs_id'),
			'state_attcode' => '',
			'reconc_keys' => array('contact_id', 'wbs_id'),
			'db_table' => 'lnkcontacttowbs',
			'db_key_field' => 'id',
			'db_finalclass_field' => '',);
		MetaModel::Init_Params($aParams);
		MetaModel::Init_InheritAttributes();
		MetaModel::Init_AddAttribute(new AttributeExternalKey("contact_id", array("targetclass"=>'Contact', "allowed_values"=>null, "sql"=>'contact_id', "is_null_allowed"=>false, "on_target_delete"=>DEL_AUTO, "depends_on"=>array(), "display_style"=>'select', "always_load_in_tables"=>false)));
		MetaModel::Init_AddAttribute(new AttributeExternalKey("wbs_id", array("targetclass"=>'WBS', "allowed_values"=>null, "sql"=>'wbs_id', "is_null_allowed"=>false, "on_target_delete"=>DEL_AUTO, "depends_on"=>array(), "display_style"=>'select', "always_load_in_tables"=>false)));
		MetaModel::Init_AddAttribute(new AttributeEnum("influence", array("allowed_values"=>new ValueSetEnum("objector,partner"), "display_style"=>'list', "sql"=>'influence', "default_value"=>'', "is_null_allowed"=>true, "depends_on"=>array('contact_id'), "always_load_in_tables"=>false)));
		MetaModel::Init_AddAttribute(new AttributeEnum("power", array("allowed_values"=>new ValueSetEnum("strong,low"), "display_style"=>'list', "sql"=>'power', "default_value"=>'', "is_null_allowed"=>true, "depends_on"=>array('contact_id'), "always_load_in_tables"=>false)));
		MetaModel::Init_AddAttribute(new AttributePercentage("allocated_percent", array("allowed_values"=>null, "sql"=>'allocated_percent', "default_value"=>'', "is_null_allowed"=>true, "depends_on"=>array(), "always_load_in_tables"=>false)));
		MetaModel::Init_AddAttribute(new AttributeInteger("allocated_days", array("allowed_values"=>null, "sql"=>'allocated_days', "default_value"=>'', "is_null_allowed"=>true, "depends_on"=>array(), "always_load_in_tables"=>false)));
		MetaModel::Init_AddAttribute(new AttributeEnum("category", array("allowed_values"=>new ValueSetEnum("1,2"), "display_style"=>'list', "sql"=>'category', "default_value"=>'', "is_null_allowed"=>true, "depends_on"=>array('contact_id', 'wbs_id'), "always_load_in_tables"=>false)));
		MetaModel::Init_AddAttribute(new AttributeExternalField("project_id", array("allowed_values"=>null, "extkey_attcode"=>'wbs_id', "target_attcode"=>'project_id', "always_load_in_tables"=>false)));



		MetaModel::Init_SetZListItems('details', array (
  'col:col0' => 
  array (
    0 => 'contact_id',
    1 => 'wbs_id',
    2 => 'category',
    3 => 'allocated_days',
    4 => 'influence',
    5 => 'power',
    6 => 'allocated_percent',
  ),
));
		MetaModel::Init_SetZListItems('standard_search', array (
  0 => 'contact_id',
  1 => 'wbs_id',
));
		MetaModel::Init_SetZListItems('list', array (
  0 => 'category',
  1 => 'wbs_id',
  2 => 'contact_id',
  3 => 'project_id',
  4 => 'influence',
  5 => 'power',
  6 => 'allocated_percent',
  7 => 'allocated_days',
));
;
	}


}